<div class="content-wrapper buffer-both text-center">
  <div class="buffer-both">
    <h1 class="title-medium">Наши пользователи</h1>
  </div>
  <div class="user-avatars-container" style="display: flex; flex-wrap: wrap; justify-content: center;">
    <% @users.each do |user| %>
      <% next if user == current_user %>
      <div class="users-list-item">
        <div class="user-image-div user-image-div-small" style="margin: 10px;">
          <% if user.avatar? %>
            <%= image_tag user.avatar.thumb.url, alt: "#{user.name}'s аватар", class: "rounded-avatar" %>
          <% else %>
            <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRCSiylwVA6PW_GnlrPL-UmN7zPcmtnzPqXSVExvXbpPQ&s" alt="заглушка" class="rounded-avatar" height="100px" width="100px">
          <% end %>
          <p><%= user.name %></p>

          <% if current_user.friends.include?(user) %>
            <button type="button" class="btn btn-dark">Вы уже друзья</button>
          <% elsif current_user.pending_friend_requests.exists?(requested_id: user.id) %>
            <button type="button" class="btn btn-dark" disabled>Запрос отправлен</button>
          <% else %>
            <% requested_friendship = current_user.requested_friendships.find_by(requested_id: user.id) %>
            <% if requested_friendship.present? %>
              <% if requested_friendship.status == 'accepted' %>
                <button type="button" class="btn btn-dark">Вы уже друзья</button>
              <% elsif requested_friendship.status == 'rejected' %>
                <%= form_with(model: Friendship.new, url: friendships_path, method: :post, class: 'friendship-form') do |form| %>
                  <%= form.hidden_field :requested_id, value: user.id %>
                  <%= form.submit 'Добавить в друзья', class: 'btn btn-dark' %>
                <% end %>
              <% elsif current_user.pending_friend_requests.exists?(requested_id: user.id) %>
                <button type="button" class="btn btn-dark" disabled>Запрос отправлен</button>
              <% end %>
            <% else %>
              <%= form_with(model: Friendship.new, url: friendships_path, method: :post, class: 'friendship-form') do |form| %>
                <%= form.hidden_field :requested_id, value: user.id %>
                <%= form.submit current_user.pending_friend_requests.exists?(requested_id: user.id) ? 'Запрос отправлен' : 'Добавить в друзья', class: 'btn btn-dark' %>
              <% end %>
            <% end %>
          <% end %>

        </div>
      </div>
    <% end %>
  </div>
</div>


<script>

    document.addEventListener('DOMContentLoaded', () => {
        const friendshipForms = document.querySelectorAll('.friendship-form');

        friendshipForms.forEach(form => {
            form.addEventListener('submit', async (event) => {
                event.preventDefault();

                // Найти кнопку отправки внутри формы
                const submitButton = form.querySelector('input[type="submit"]');

                // Проверить, заблокирована ли кнопка
                if (submitButton.disabled) {
                    return; // Если кнопка заблокирована, не выполнять дальнейшие действия
                }

                try {
                    // Заблокировать кнопку перед отправкой запроса
                    submitButton.disabled = true;

                    const response = await fetch(form.action, {
                        method: form.method,
                        body: new FormData(form),
                        headers: {
                            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
                        }
                    });

                    if (response.ok) {
                        // Изменить текст и заблокировать кнопку после успешной отправки запроса на дружбу
                        submitButton.value = 'Запрос отправлен';
                        submitButton.disabled = true;
                    } else {
                        // Разблокировать кнопку в случае ошибки при отправке запроса
                        submitButton.disabled = false;
                        console.error('Ошибка при отправке запроса на сервер');
                    }
                } catch (error) {
                    // Разблокировать кнопку в случае ошибки соединения
                    submitButton.disabled = false;
                    console.error(error);
                }
            });
        });
    });

    document.addEventListener('DOMContentLoaded', () => {
        const acceptLinks = document.querySelectorAll('.accept-friendship-link');
        const rejectLinks = document.querySelectorAll('.reject-friendship-link');

        acceptLinks.forEach(link => {
            link.addEventListener('click', async (e) => {
                e.preventDefault();

                const friendshipId = link.dataset.friendshipId;
                const url = `/friendships/${friendshipId}/accept`;

                try {
                    const response = await fetch(url, {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
                        }
                    });

                    // Обработка ответа...
                } catch (error) {
                    console.error(error);
                }
            });
        });

        rejectLinks.forEach(link => {
            link.addEventListener('click', async (e) => {
                e.preventDefault();

                const friendshipId = link.dataset.friendshipId;
                const url = `/friendships/${friendshipId}/reject`;

                try {
                    const response = await fetch(url, {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
                        }
                    });

                    // Обработка ответа...
                } catch (error) {
                    console.error(error);
                }
            });
        });
    });

</script>
